{"version":3,"sources":["components/Navbar/Navbar.js","components/Card/Card.js","App.js","index.js"],"names":["Navbar","className","class","href","this","props","title","message","score","topScore","Component","Card","onClick","clickedImage","id","alt","src","image","shuffle","array","i","length","j","Math","floor","random","App","state","sprites","clickedSprites","setState","indexOf","push","console","log","handleIncrement","makeShuffle","map","sprite","ReactDOM","render","document","getElementById"],"mappings":"+/BAmBeA,G,uLAdX,OACE,4BAAQC,UAAU,UAChB,4BACE,wBAAIC,MAAM,SACR,uBAAGC,KAAK,KAAI,yBAAKD,MAAM,SAAa,6BAAME,KAAKC,MAAMC,SAEvD,wBAAIJ,MAAM,WAAWE,KAAKC,MAAME,SAChC,sCAAYH,KAAKC,MAAMG,MAAvB,iBAA4CJ,KAAKC,MAAMI,gB,GAT5CC,cCMNC,G,MANF,SAAAN,GAAK,OAChB,yBAAKJ,UAAU,gBAAgBW,QAAS,kBAAMP,EAAMQ,aAAaR,EAAMS,MACrE,yBAAKC,IAAI,SAASC,IAAKX,EAAMY,W,MCEjC,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IAsFMO,E,2MAlFbC,MAAQ,CACNC,UACApB,MAAO,EACPC,SAAU,EACVF,QAAS,kCACTsB,eAAgB,I,EAGlBhB,aAAe,SAAAC,GACb,IAAIe,EAAiB,EAAKF,MAAME,eAC5BrB,EAAQ,EAAKmB,MAAMnB,MACnBC,EAAW,EAAKkB,MAAMlB,SAC1B,EAAKqB,SAAS,CACZvB,QAAS,MAIyB,IAAhCsB,EAAeE,QAAQjB,IACzBe,EAAeG,KAAKlB,GACpBmB,QAAQC,IAAIL,GAEZ,EAAKM,kBAEL,EAAKC,eACyB,KAArB,EAAKT,MAAMnB,MAEpB,EAAKsB,SAAS,CACZvB,QAAS,WACTC,MAAO,EACPqB,eAAgB,MAIlB,EAAKC,SAAS,CACZtB,MAAO,EACPqB,eAAgB,KAElBI,QAAQC,IAAI,aACZ,EAAKJ,SAAS,CACZvB,QAAS,qCAKTC,EAAQC,GACV,EAAKqB,SAAS,CACZrB,SAAUD,K,EAKhB2B,gBAAkB,WAChB,EAAKL,SAAS,CAAEtB,MAAO,EAAKmB,MAAMnB,MAAQ,K,EAG5C4B,YAAc,WACZ,EAAKN,SAAS,CAAEF,QAASV,EAAQU,M,wEAGzB,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEtB,MAAM,cACNE,MAAOJ,KAAKuB,MAAMnB,MAClBC,SAAUL,KAAKuB,MAAMlB,SACrBF,QAASH,KAAKuB,MAAMpB,UAEtB,yBAAKN,UAAU,OACZG,KAAKuB,MAAMC,QAAQS,IAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACExB,GAAIwB,EAAOxB,GACXG,MAAOqB,EAAOrB,MACdJ,aAAc,EAAKA,uB,GA1EfH,aCXlB6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b74d780b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <navbar className=\"navbar\">\n        <ul>\n          <li class=\"brand\">\n            <a href=\"/\"><div class=\"logo\"></div><div>{this.props.title}</div></a>\n          </li>\n          <li class=\"message\">{this.props.message}</li>\n          <li>Score: {this.props.score} | Top Score: {this.props.topScore}</li>\n        </ul>\n      </navbar>\n    );\n  }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n  <div className=\"img-container\" onClick={() => props.clickedImage(props.id)}>\n    <img alt=\"sprite\" src={props.image} />\n  </div>\n);\n\nexport default Card;","import React, { Component } from \"react\";\nimport sprites from \"./sprites.json\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Card from \"./components/Card/Card\";\nimport \"./App.css\";\n\n// helper function to shuffle the cards on each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    sprites,\n    score: 0,\n    topScore: 0,\n    message: \"Click any Robot Master to start\",\n    clickedSprites: []\n  };\n\n  clickedImage = id => {\n    let clickedSprites = this.state.clickedSprites;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      message: \"\"\n    });\n\n    // if the clicked sprite has an id of the indexed sprites\n    if (clickedSprites.indexOf(id) === -1) {\n      clickedSprites.push(id);\n      console.log(clickedSprites);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (this.state.score === 16) {\n      // alert player wins\n      this.setState({\n        message: \"You Win!\",\n        score: 0,\n        clickedSprites: []\n      });\n    } else {\n      // alert player loss\n      this.setState({\n        score: 0,\n        clickedSprites: []\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        message: \"Duplicate clicked, score reset!\"\n      });\n    }\n\n    // set topScore if current score is greater\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  makeShuffle = () => {\n    this.setState({ sprites: shuffle(sprites) });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          title=\"Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <div className=\"row\">\n          {this.state.sprites.map(sprite => (\n            <Card\n              id={sprite.id}\n              image={sprite.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}